<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.6">
  <POU Name="FB_Slit" Id="{96cc3dff-2d48-44bb-aac4-147730d312ba}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Slit
VAR_IN_OUT
	Axis1: AXIS_REF; 	// Right/Lower
	Axis2: AXIS_REF;	// Left/Upper
	GapAxis: AXIS_REF;
	CenterAxis: AXIS_REF;
	fbAxis1: FB_DriveVirtual;
	fbAxis2: FB_DriveVirtual;
	fbGapAxis:FB_DriveVirtual;
	fbCenterAxis:FB_DriveVirtual;
	stGap:DUT_FB_DriveVirtualIF;
    stCenter:DUT_FB_DriveVirtualIF;
END_VAR
VAR_INPUT
	bLimitFwd1: BOOL;
	bLimitBwd1: BOOL;
	bLimitFwd2: BOOL;
	bLimitBwd2: BOOL;	
	bEnable: BOOL;
	bReset: BOOL;
	bOverlap: BOOL;	// True = Slits are allowed to overlap and cannot collide
	fMinGap: LREAL;	// in mm
END_VAR
VAR_OUTPUT
	bError: BOOL;
END_VAR
VAR
	fbGearInMultiMaster_1: MC_GearInMultiMaster;
	fbGearInMultiMaster_2: MC_GearInMultiMaster;
	EmptyAxis1: AXIS_REF; // Needed for master axis 3 in MC_GearInMultiMaster
	EmptyAxis2: AXIS_REF; // Needed for master axis 4 in MC_GearInMultiMaster
	fbHomeDirect1: FB_HomeDirect;
	fbHomeDirect2: FB_HomeDirect;
	fbGearOut1: MC_GearOut;
	fbGearOut2: MC_GearOut;
	nSlitState: INT := 0;
	bReverseCalc: BOOL:=FALSE;
	bEnableGearing: BOOL:=FALSE;
	bDecouple: BOOL:=FALSE;
	bCoupleToggleOn1: BOOL;
	bCoupleToggleOn2: BOOL;
	fbCoupleToggleOn1: R_TRIG;
	fbCoupleToggleOn2: R_TRIG;	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Gap interface parameter transfer
//fbGapAxis.En:=stGap.EN;
fbGapAxis.bEnable:=stGap.bEnable;
fbGapAxis.bReset:=stGap.bReset;	
fbGapAxis.bExecute:=stGap.bExecute;	
fbGapAxis.nCommand:=stGap.nCommand;
fbGapAxis.nCmdData:=stGap.nCmdData;
fbGapAxis.fVelocity:=stGap.fVelocity;	
fbGapAxis.fPosition:=stGap.fPosition;
fbGapAxis.fAcceleration:=stGap.fAcceleration;
fbGapAxis.fDeceleration:=stGap.fDeceleration;
fbGapAxis.bJogFwd:=stGap.bJogFwd;
fbGapAxis.bJogBwd:=stGap.bJogBwd;	
//fbGapAxis.bLimitFwd:=stGap.bLimitFwd;
//fbGapAxis.bLimitFwd:=stGap.bLimitFwd;
fbGapAxis.fOverride:=stGap.fOverride;
//fbGapAxis.bHomeSensor:=stGap.bHomeSensor;
fbGapAxis.fHomePosition:=stGap.fHomePosition;
fbGapAxis.nHomeRevOffset:=stGap.nHomeRevOffset;
fbGapAxis.MasterAxis:=stGap.MasterAxis;

stGap.EnO:=fbGapAxis.EnO;
stGap.bEnabled:=fbGapAxis.bEnabled;
//stGap.bBusy:=fbGapAxis.bBusy;
stGap.bBusy:=fbGapAxis.status.HasJob OR fbAxis1.status.HasJob OR fbAxis2.status.HasJob;
stGap.bDone:=fbGapAxis.bDone AND fbAxis1.status.HasBeenStopped AND fbAxis2.status.HasBeenStopped;;
stGap.bError:=fbGapAxis.bError;
stGap.bHomed:=fbGapAxis.bHomed;
stGap.nErrorId:=fbGapAxis.nErrorId;
stGap.nMotionAxisID:=fbGapAxis.nMotionAxisID;
stGap.Status:=fbGapAxis.Status;
//stGap.fActPosition:=fbGapAxis.fActPosition;
stGap.fActPosition:=Axis1.NcToPlc.ActPos+Axis2.NcToPlc.ActPos;
stGap.fActVelocity:=fbGapAxis.fActVelocity;
stGap.fActDiff:=fbGapAxis.fActDiff;
stGap.sErrorMessage:=fbGapAxis.sErrorMessage;
stGap.stAxisStatus:=fbGapAxis.stAxisStatus;

//Status struct for EPICS communication
(*stGap.stAxisStatus.bEnable:=bEnable;
stGap.stAxisStatus.bEnabled:=bEnabled;
stGap.stAxisStatus.bError:=bError;
stGap.stAxisStatus.bExecute:=bExecute;
stGap.stAxisStatus.bHomeSensor:=bHomeSensor;
stGap.stAxisStatus.bJogBwd:=bJogBwd;
stGap.stAxisStatus.bJogFwd:=bJogFwd;
stGap.stAxisStatus.bLimitBwd:=bLimitBwd;
stGap.stAxisStatus.bLimitFwd:=bLimitFwd;
stGap.stAxisStatus.bReset:=bReset;
stGap.stAxisStatus.fAcceleration:=fAcceleration;
stGap.stAxisStatus.fActDiff:=fActDiff;*)
//stGap.stAxisStatus.fActPosition:=fActPosition;
stGap.stAxisStatus.fActPosition:=Axis1.NcToPlc.ActPos+Axis2.NcToPlc.ActPos;
(*stGap.stAxisStatus.fActVelocity:=fActVelocity;
stGap.stAxisStatus.fDeceleration:=fDeceleration;
stGap.stAxisStatus.fOverride:=fOverride;
stGap.stAxisStatus.fPosition:=fPosition;
stGap.stAxisStatus.fVelocity:=fVelocity;
stGap.stAxisStatus.nCmdData:=nCmdData;  //Or nCmdDataLocal
stGap.stAxisStatus.nCommand:=nCommand;  //Or nCommandLocal
stGap.stAxisStatus.nErrorId:=nErrorId;
stGap.stAxisStatus.bBusy:=bBusy;
stGap.stAxisStatus.bHomed:=bHomed;*)

//**********************************************************************************//

// Center interface parameter transfer
//fbCenterAxis.En:=fbCenterAxis.En;
fbCenterAxis.bEnable:=stCenter.bEnable;
fbCenterAxis.bReset:=stCenter.bReset;	
fbCenterAxis.bExecute:=stCenter.bExecute;	
fbCenterAxis.nCommand:=stCenter.nCommand;
fbCenterAxis.nCmdData:=stCenter.nCmdData;
fbCenterAxis.fVelocity:=stCenter.fVelocity;	
fbCenterAxis.fPosition:=stCenter.fPosition;
fbCenterAxis.fAcceleration:=stCenter.fAcceleration;
fbCenterAxis.fDeceleration:=stCenter.fDeceleration;
fbCenterAxis.bJogFwd:=stCenter.bJogFwd;
fbCenterAxis.bJogBwd:=stCenter.bJogBwd;
//fbCenterAxis.bLimitFwd:=fbCenterAxis.bLimitFwd;
//fbCenterAxis.bLimitFwd:=fbCenterAxis.bLimitFwd;
fbCenterAxis.fOverride:=stCenter.fOverride;
//fbCenterAxis.bHomeSensor:=stCenter.bHomeSensor;
fbCenterAxis.fHomePosition:=stCenter.fHomePosition;
fbCenterAxis.nHomeRevOffset:=stCenter.nHomeRevOffset;
fbCenterAxis.MasterAxis:=stCenter.MasterAxis;

//Bit 1 and bit 2 of the control word to the nc axis defines whether feed direction is possible or not (do not change manually, done by the power block)
//Axis1.PlcToNc.ControlDWord.1


stCenter.EnO:=fbCenterAxis.EnO;
stCenter.bEnabled:=fbCenterAxis.bEnabled;
//stCenter.bBusy:=fbCenterAxis.bBusy;
stCenter.bBusy:=fbCenterAxis.status.HasJob OR fbAxis1.status.HasJob OR fbAxis2.status.HasJob;
stCenter.bDone:=fbCenterAxis.bDone AND fbAxis1.status.HasBeenStopped AND fbAxis2.status.HasBeenStopped;
stCenter.bError:=fbCenterAxis.bError;
stCenter.bHomed:=fbCenterAxis.bHomed;
stCenter.nErrorId:=fbCenterAxis.nErrorId;
stCenter.nMotionAxisID:=fbCenterAxis.nMotionAxisID;
stCenter.Status:=fbCenterAxis.Status;
//stCenter.fActPosition:=fbCenterAxis.fActPosition;
stCenter.fActPosition:=(Axis1.NcToPlc.ActPos-Axis2.NcToPlc.ActPos)/2;
stCenter.fActVelocity:=fbCenterAxis.fActVelocity;
stCenter.fActDiff:=fbCenterAxis.fActDiff;
stCenter.sErrorMessage:=fbCenterAxis.sErrorMessage;
stCenter.stAxisStatus:=fbCenterAxis.stAxisStatus;

stCenter.stAxisStatus.fActPosition:=(Axis1.NcToPlc.ActPos-Axis2.NcToPlc.ActPos)/2;

//**********************************************************************************//

//fbCoupleToggleOn(CLK:= GapAxis.Status.HasJob OR CenterAxis.Status.HasJob , Q=> bCoupleToggleOn);
fbCoupleToggleOn1(CLK:= MAIN.M3.bExecute, Q=> bCoupleToggleOn1);
fbCoupleToggleOn2(CLK:= MAIN.M4.bExecute, Q=> bCoupleToggleOn2);

CASE nSlitState OF
	0: // Wait for user to request coupling turned on
		IF bEnable THEN	
			nSlitState:=nSlitState+1;
			bReverseCalc:=TRUE;
		END_IF
	1: // One of the virtual axis has a command so reverse calculate (fbDirectHome) virtual axes positions
		IF (fbHomeDirect1.bDone AND fbHomeDirect2.bDone)= TRUE THEN
			nSlitState:=0;
			bReverseCalc:=FALSE;				
		END_IF
		IF bCoupleToggleOn1 OR bCoupleToggleOn2 THEN
			nSlitState:=2;	
		END_IF
	2: // Turn off reverse calculate (fbDirectHome)
		bReverseCalc:=FALSE;
		bEnableGearing:=TRUE;
		nSlitState:=nSlitState+1;
	3: // Start GearInMultiMaster function blocks
		bEnableGearing:=FALSE;
		nSlitState:=nSlitState+1;
	4: // Wait until movement is finished and then uncouple
		IF NOT (GapAxis.Status.HasJob AND CenterAxis.Status.HasJob AND Axis1.Status.HasJob AND Axis2.Status.HasJob)  THEN
			bEnableGearing:=FALSE;
			bDecouple:=TRUE;
			nSlitState:=nSlitState+1;		
		END_IF
	5: // Finish decoupling and return to start
		bDecouple:=FALSE;
		nSlitState:=0;
END_CASE

fbGearInMultiMaster_1(
	Master1:= GapAxis, 
	Master2:= CenterAxis, 
	Master3:= EmptyAxis1, 
	Master4:= EmptyAxis2, 
	Slave:= Axis1, 
	Enable:= bEnableGearing, 
	GearRatio1:= 0.5, 
	GearRatio2:= 1, 
	GearRatio3:= , 
	GearRatio4:= , 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= , 
	Options:= , 
	InGear=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );

fbGearInMultiMaster_2(
	Master1:= GapAxis, 
	Master2:= CenterAxis, 
	Master3:= EmptyAxis1, 
	Master4:= EmptyAxis2, 
	Slave:= Axis2, 
	Enable:= bEnableGearing, 
	GearRatio1:= 0.5, 
	GearRatio2:= -1, 
	GearRatio3:= , 
	GearRatio4:= , 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= , 
	Options:= , 
	InGear=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );

fbHomeDirect1(
	En:= TRUE, 
	bReset:= bReset, 
	bExecute:= bReverseCalc, // Won't work without motor power
	fHomePosition:= Axis1.NcToPlc.ActPos+Axis2.NcToPlc.ActPos, // Gap 
	Axis:= GapAxis, 
	EnO=> , 
	bBusy=> , 
	bDone=> , 
	bHomed=> , 
	bError=> , 
	nErrorId=> );
	
fbHomeDirect2(
	En:= TRUE, 
	bReset:= bReset, 
	bExecute:= bReverseCalc, // Won't work without motor power
	fHomePosition:= (Axis1.NcToPlc.ActPos-Axis2.NcToPlc.ActPos)/2, // Offset 
	Axis:= CenterAxis, 
	EnO=> , 
	bBusy=> , 
	bDone=> , 
	bHomed=> , 
	bError=> , 
	nErrorId=> );

fbGearOut1(
	Slave:= GapAxis, 
	Execute:= bDecouple, 
	Options:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );
	
fbGearOut2(
	Slave:= CenterAxis, 
	Execute:= bDecouple, 
	Options:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );]]></ST>
    </Implementation>
    <LineIds Name="FB_Slit">
      <LineId Id="737" Count="109" />
      <LineId Id="735" Count="1" />
      <LineId Id="670" Count="0" />
      <LineId Id="682" Count="1" />
      <LineId Id="667" Count="0" />
      <LineId Id="441" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="672" Count="0" />
      <LineId Id="662" Count="0" />
      <LineId Id="696" Count="0" />
      <LineId Id="673" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="701" Count="1" />
      <LineId Id="700" Count="0" />
      <LineId Id="698" Count="0" />
      <LineId Id="551" Count="0" />
      <LineId Id="496" Count="0" />
      <LineId Id="676" Count="1" />
      <LineId Id="681" Count="0" />
      <LineId Id="614" Count="1" />
      <LineId Id="627" Count="1" />
      <LineId Id="623" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="626" Count="0" />
      <LineId Id="630" Count="0" />
      <LineId Id="199" Count="1" />
      <LineId Id="632" Count="0" />
      <LineId Id="634" Count="0" />
      <LineId Id="633" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="620" Count="0" />
      <LineId Id="31" Count="20" />
      <LineId Id="9" Count="0" />
      <LineId Id="123" Count="21" />
      <LineId Id="96" Count="0" />
      <LineId Id="581" Count="0" />
      <LineId Id="583" Count="16" />
      <LineId Id="703" Count="0" />
      <LineId Id="601" Count="5" />
      <LineId Id="582" Count="0" />
      <LineId Id="617" Count="0" />
      <LineId Id="99" Count="6" />
      <LineId Id="97" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="108" Count="6" />
      <LineId Id="107" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>