<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.14">
  <POU Name="FB_DriveVirtual" Id="{45901cd0-c6d2-4114-b7cf-de832171219f}" SpecialFunc="None">
    <Declaration><![CDATA[///#########################################################
///Function block to run a virtual drive with Nc
///	Library:		
///	Tc2_MC2.lib
///
///	Global Variables:
///	
///	Data types:
///	
///	External functions:
///
///###########################################################
FUNCTION_BLOCK FB_DriveVirtual
VAR
	sVersion: STRING:='1.0.3';	
END_VAR
VAR_INPUT
	En: BOOL;
	bEnable: BOOL;
	bReset: BOOL;
	bExecute: BOOL;
	/////	nCommandLocal...
	/////	0 = Jog
	/////	1 = MoveVelocity
	/////	2 = MoveRelative
	/////	3 = MoveAbsolut
	/////	4 = MoveModulo
	/////	10 = Homing
	/////	20 = SuperInp >>>ToBe
	/////	30 = Gear
	nCommand: UINT;
	nCmdData: UINT;
	fVelocity: LREAL;
	fPosition: LREAL;
	fAcceleration: LREAL;
	fDeceleration: LREAL;
	bJogFwd: BOOL;
	bJogBwd: BOOL;
	bLimitFwd: BOOL;
	bLimitBwd: BOOL;	
	fOverride: LREAL := 100;
	bHomeSensor: BOOL;
	fHomePosition:LREAL;
	nHomeRevOffset: UINT;
	MasterAxis: AXIS_REF;
END_VAR
VAR_OUTPUT
	EnO: BOOL;
	bEnabled: BOOL;
	bBusy: BOOL;
	bDone: BOOL;
	bError: BOOL;
	bHomed: BOOL;
	nErrorId: UDINT;
	nMotionAxisID:UDINT:=0;  //Axis id in Motion (NC)
	Status: ST_AxisStatus;
	fActVelocity: LREAL;
	fActPosition: LREAL;
	fActDiff: LREAL;
    sErrorMessage:STRING;
END_VAR
VAR_IN_OUT
	Axis: AXIS_REF;
END_VAR
VAR	
	nCommandLocal: UINT;
	nCmdDataLocal: UINT;
	bFirstScan: BOOL := TRUE;
	fbReset: MC_Reset;
	fbPower: MC_Power;
	fbHalt: MC_Halt;
	fbJog: MC_Jog;
	fbMoveVelocity: MC_MoveVelocity;
	fbMoveRelative: MC_MoveRelative;
	fbMoveAbsolute: MC_MoveAbsolute;
	fbMoveModulo: MC_MoveModulo;	
	fbHomeVirtual:FB_HomeVirtual;
	fbGearInDyn: MC_GearInDyn;
	fbGearOut: MC_GearOut;
	fbExecuteRiseEdge: R_TRIG;
	stAxisStatus: DUT_AxisStatus_v0_01;	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[EnO:=En;

// Transfer nCommand and nCmdData to local copies at rising edge of bExecute (avoid issues if nCommand or nCmdData are changed during a command) 
fbExecuteRiseEdge(CLK:=bExecute);
IF fbExecuteRiseEdge.Q THEN
  nCmdDataLocal:=nCmdData;
  nCommandLocal:=nCommand;
END_IF

bHomed:=fbHomeVirtual.bHomed; //Add in DUT_AxisStatus later
bDone:=FALSE;

(*Reset*)
fbReset(
	Execute:=bReset AND Axis.Status.Error,
	Axis:=Axis,
	Done=> ,
	Busy=> ,
	Error=> ,
	ErrorID=> );

(*Power*)
fbPower(
	Axis:=Axis,
	Enable:=bEnable,	
	Enable_Positive:=bEnable AND bLimitFwd,	
	Enable_Negative:=bEnable AND bLimitBwd,	
	Override:=fOverride,
	BufferMode:= ,
	Status=> ,
	Busy=> ,
	Active=> ,
	Error=> ,
	ErrorID=> );

(*Halt*)
fbHalt(
	Execute:=NOT bExecute  AND (((fbMoveVelocity.Busy OR fbPower.Busy) AND (nCommandLocal=1)) OR (fbMoveRelative.Busy AND (nCommandLocal=2)) OR (fbMoveAbsolute.Busy AND (nCommandLocal=3)) OR (fbMoveModulo.Busy AND (nCommandLocal=4)) OR (fbHomeVirtual.bBusy AND (nCommandLocal=10))),
	Deceleration:=fDeceleration,
	Jerk:=0,
	BufferMode:= ,
	Options:= ,
	Axis:=Axis ,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

(*Jog (Command = 0)*)
fbJog(
	JogForward:=bJogFwd AND (nCommandLocal=0) ,
	JogBackwards:=bJogBwd AND (nCommandLocal=0) ,
	Mode:=UINT_TO_INT(nCmdDataLocal),
	Position:= ,
	Velocity:=fVelocity,
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0,
	Axis:=Axis,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

(*MoveVelocity (Command = 1)*)
fbMoveVelocity(
	Execute:=bExecute AND (nCommandLocal=1),
	Velocity:=ABS(fVelocity),
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0,
	Direction:=SEL(fVelocity<0, MC_Positive_Direction, MC_Negative_Direction),
	BufferMode:= ,
	Options:= ,
	Axis:=Axis,
	InVelocity=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

(*MoveRelative (Command = 2)*)
fbMoveRelative(
	Execute:=bExecute AND (nCommandLocal=2), 
	Distance:=fPosition, 
	Velocity:=ABS(fVelocity), 
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0,
	BufferMode:= , 
	Options:= , 
	Axis:=Axis, 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
IF nCommandLocal=2 THEN
	bDone:=fbMoveRelative.Done;
END_IF
	
(*MoveAbsolute (Command = 3)*)
fbMoveAbsolute(
	Execute:=bExecute AND (nCommandLocal=3),
	Position:=fPosition,
	Velocity:=ABS(fVelocity),
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0,
	BufferMode:= ,
	Options:= ,
	Axis:=Axis,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );

IF nCommandLocal=3 THEN
	bDone:=fbMoveAbsolute.Done;
END_IF

(*MoveModulo (Command = 4)*)
fbMoveModulo(
	Execute:=bExecute AND (nCommandLocal=4), 
	Position:=fPosition, 
	Velocity:=ABS(fVelocity), 
	Acceleration:=fAcceleration, 
	Deceleration:=fDeceleration, 
	Jerk:=0, 
	Direction:=UINT_TO_INT(nCmdDataLocal), 
	BufferMode:= , 
	Options:= , 
	Axis:=Axis, 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );

IF nCommandLocal=4 THEN
	bDone:=fbMoveModulo.Done;
END_IF
	
(*Home (Command = 10)*)
fbHomeVirtual(	
	bExecute:= nCommandLocal=10 AND bExecute,
	fHomePosition:=fHomePosition,
	bHomeSensor:=bHomeSensor,
	bLimitBwd:=bLimitBwd,
	bLimitFwd:=bLimitFwd,
	nCmdData:=nCmdDataLocal,
	bReset:=bReset,
	nHomeRevOffset:=nHomeRevOffset,
	Axis:=Axis
	);
	
IF nCommandLocal=10 THEN
	bDone:=fbHomeVirtual.bDone;
END_IF
	
(*Gear (Command = 30)*)
fbGearInDyn(
	Enable:=bExecute  AND (nCommandLocal=30),
	GearRatio:=SEL(nCmdDataLocal>0, 1,fVelocity),
	Acceleration:=fAcceleration,
	Deceleration:=fDeceleration,
	Jerk:=0.0,
	BufferMode:= , 
	Options:= , 
	Master:=MasterAxis,
	Slave:=Axis,
	InGear=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
fbGearOut(
	Execute:=NOT bExecute AND Axis.Status.NotMoving AND (nCommandLocal=30),
	Slave:=Axis,
	Error=>,
	Done=>,
	ErrorID=>);


IF nCommandLocal=30 THEN
	bDone:=Axis.Status.Coupled;
END_IF

(*Busy*)
bBusy:=Axis.Status.HasJob OR Axis.Status.HomingBusy OR fbHomeVirtual.bBusy;

(*Enabled*)
bEnabled:=fbPower.Status;

(*Error from functions and Nc*)
IF fbPower.Error AND fbPower.Active THEN
	bError:=fbPower.Enable;
	nErrorId:=fbPower.ErrorID;
ELSIF fbHalt.Error AND fbHalt.Active THEN
	bError:=fbHalt.Execute;
	nErrorId:=fbHalt.ErrorID;
ELSIF fbJog.Error AND nCommandLocal=0 (*fbJog.Active*) THEN
	bError:=fbJog.JogForward OR fbJog.JogBackwards;
	nErrorId:=fbJog.ErrorID;
ELSIF fbMoveVelocity.Error AND nCommandLocal=1(*fbMoveVelocity.Active*) THEN
	bError:=fbMoveVelocity.Execute;
	nErrorId:=fbMoveVelocity.ErrorID;
ELSIF fbMoveRelative.Error AND nCommandLocal=2 (*fbMoveRelative.Active*) THEN
	bError:=fbMoveRelative.Execute;
	nErrorId:=fbMoveRelative.ErrorID;
ELSIF fbMoveAbsolute.Error AND nCommandLocal=3 (*fbMoveAbsolute.Active*) THEN
	bError:=fbMoveAbsolute.Execute;
	nErrorId:=fbMoveAbsolute.ErrorID;
ELSIF fbMoveModulo.Error AND nCommandLocal=4 (*fbMoveModulo.Active*) THEN
	bError:=fbMoveModulo.Execute;
	nErrorId:=fbMoveModulo.ErrorID;
ELSIF fbHomeVirtual.bError AND nCommandLocal=10 (*fbHome.Active*) THEN
	bError:=fbHomeVirtual.bError;
	nErrorId:=fbHomeVirtual.nErrorID;
ELSIF fbGearInDyn.Error AND nCommandLocal=30 (*fbGearInDyn.Active*) THEN
	bError:=fbGearInDyn.Enable;
	nErrorId:=fbGearInDyn.ErrorID;
ELSIF fbGearOut.Error AND nCommandLocal=30 AND Axis.Status.Coupled THEN
	bError:=fbGearOut.Execute;
	nErrorId:=fbGearOut.ErrorID;
ELSIF Axis.Status.Error  THEN
	bError:=TRUE;
	nErrorId:=Axis.Status.ErrorID;
ELSIF fbHomeVirtual.bError THEN
	bError:=TRUE;
	nErrorId:=fbHomeVirtual.nErrorId;
ELSE
	bError:=FALSE;
	nErrorId:=0;
END_IF;

(*Converese nErrorID to string*)
sErrorMessage:=WORD_TO_HEXSTR(in:=TO_WORD(nErrorID) , iPrecision:= 4, bLoCase:=0 );

(*Status from Nc*)
Status:=Axis.Status;

(*Axis id in motion "motor"*)
nMotionAxisID:=axis.NcToPlc.AxisId;

(*Actual Velocity*)
fActVelocity:=Axis.NcToPlc.ActVelo;

(*Actual Position*)
IF Axis.Status.OpMode.Modulo THEN
	fActPosition:=Axis.NcToPlc.ModuloActPos;
ELSE
	fActPosition:=Axis.NcToPlc.ActPos;
END_IF

(*Actual Position*)
fActDiff:=Axis.NcToPlc.PosDiff;


//Status struct for EPICS communication
stAxisStatus.bEnable:=bEnable;
stAxisStatus.bEnabled:=bEnabled;
stAxisStatus.bError:=bError;
stAxisStatus.bExecute:=bExecute;
stAxisStatus.bHomeSensor:=bHomeSensor;
stAxisStatus.bJogBwd:=bJogBwd;
stAxisStatus.bJogFwd:=bJogFwd;
stAxisStatus.bLimitBwd:=bLimitBwd;
stAxisStatus.bLimitFwd:=bLimitFwd;
stAxisStatus.bReset:=bReset;
stAxisStatus.fAcceleration:=fAcceleration;
stAxisStatus.fActDiff:=fActDiff;
stAxisStatus.fActPosition:=fActPosition;
stAxisStatus.fActVelocity:=fActVelocity;
stAxisStatus.fDeceleration:=fDeceleration;
stAxisStatus.fOverride:=fOverride;
stAxisStatus.fPosition:=fPosition;
stAxisStatus.fVelocity:=fVelocity;
stAxisStatus.nCmdData:=nCmdData;  //Or nCmdDataLocal
stAxisStatus.nCommand:=nCommand;  //Or nCommandLocal
stAxisStatus.nErrorId:=nErrorId;
stAxisStatus.bBusy:=bBusy;
stAxisStatus.bHomed:=bHomed;

IF bFirstScan THEN
	bFirstScan:=FALSE;
END_IF]]></ST>
    </Implementation>
    <LineIds Name="FB_DriveVirtual">
      <LineId Id="3" Count="0" />
      <LineId Id="1152" Count="0" />
      <LineId Id="1147" Count="0" />
      <LineId Id="1150" Count="1" />
      <LineId Id="4" Count="0" />
      <LineId Id="1154" Count="0" />
      <LineId Id="1148" Count="0" />
      <LineId Id="1153" Count="0" />
      <LineId Id="5" Count="12" />
      <LineId Id="1029" Count="25" />
      <LineId Id="44" Count="19" />
      <LineId Id="66" Count="88" />
      <LineId Id="939" Count="1" />
      <LineId Id="156" Count="1" />
      <LineId Id="941" Count="1" />
      <LineId Id="159" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="1061" Count="0" />
      <LineId Id="1059" Count="1" />
      <LineId Id="1058" Count="0" />
      <LineId Id="552" Count="29" />
      <LineId Id="584" Count="1" />
      <LineId Id="587" Count="38" />
      <LineId Id="944" Count="2" />
      <LineId Id="696" Count="54" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>