<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.17">
  <POU Name="FB_ErrorSystem" Id="{978ea49f-a940-4b4e-9f45-8cdde4adcf37}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ErrorSystem

VAR_INPUT
	En					: BOOL;							//Enable input
	bReset				: BOOL;							//Delete all Error entry
	nErrorNum			: ULINT;						//ErrorID to be acknoledged
	bACK				: BOOL;							//Acknoledge the given error and delete it from the list
	bValidSelection		: BOOL;							//Visu table valid selection flag
	nTableRowIndex		: INT;							//Visu table selected row index
END_VAR
	
VAR_OUTPUT
	EnO 				: BOOL;							//Enable output
	nSelectedError		: ULINT;						//Currently selected errorID
	nNoError			: UINT;							//Number of Errors
	nActive				: UINT;							//Number of Active Errors
	nInactive			: UINT;							//Number of Inactive Errors
	nNoOverflow			: INT;							//Number of Overflows
	pErrorSystem 		: POINTER TO ST_ErrorSystem;	//Pointer to ErrorSystem
END_VAR

VAR_IN_OUT
	
END_VAR

VAR
	nFreePos : UINT;									//Number of free position in the list
	nListCnt1 : UINT;									//work variable
	ErrorSystem : ST_ErrorSystem;						//Data structure of the Error list
	
	bAckInternal		: BOOL;
	bResetInternal		: BOOL;
	nErrorNumInternal	: ULINT;
	
	Ack_trig		: R_TRIG;
	RST_trig		: R_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
* ================================================================================
*                                   DESCRIPTION
* ================================================================================
* This Function Block implements the core structure of the Error/Warning Handling
* system. It realizes the datastructure containing every Error Entry, collect
* statistics about the usage and manage the Error Entries.
* ================================================================================
*)
EnO := En;

//Ponter to ErrorSystem
pErrorSystem := ADR(ErrorSystem);

//Number of overflows
nNoOverflow := ErrorSystem.nNoOverflows;

//Rising-edge detection on inputs
Ack_trig (
	CLK		:= bAck,
	Q		=> bAckInternal,
);

RST_trig (
	CLK		:= bReset,
	Q		=> bResetInternal,
);

//Entry selection decision 
IF bValidSelection AND nErrorNum = 0 THEN
	nErrorNumInternal := ErrorSystem.aErrorData[nTableRowIndex].ErrorNum;
ELSE
	nErrorNumInternal := nErrorNum;
END_IF

nSelectedError := nErrorNumInternal;

//Reset the system
IF bResetInternal THEN
	MEMSET ( ADR(ErrorSystem.aErrorData[0]), 0, cSizeOfErrorData * SIZEOF(ST_ErrorEntry));
	ErrorSystem.nNextErrorNum := 1;
END_IF

//Number of errors
nNoError := 0;
nActive := 0;
nInactive := 0;
FOR nListCnt1 := 0 TO cSizeOfErrorData - 1 DO
	IF ErrorSystem.aErrorData[nListCnt1].ErrorNum <> 0  THEN
		nNoError := nNoError+1;
		IF ErrorSystem.aErrorData[nListCnt1].ErrorState = DUT_ErrorState.Active THEN
			nActive := nActive + 1;
		ELSE
			nInactive := nInactive + 1;
		END_IF
	END_IF
END_FOR
ErrorSystem.nNoErrors := nNoError;

//Number of free positions
nFreePos := cSizeOfErrorData - nNoError;

//Acknoledge specified Error entry
IF bAckInternal THEN
	FOR nListCnt1 := 0 TO cSizeOfErrorData - 1 DO
		IF ErrorSystem.aErrorData[nListCnt1].ErrorNum = nErrorNumInternal THEN
			ErrorSystem.aErrorData[nListCnt1].ErrorState := DUT_ErrorState.Acknowledged;
		END_IF
	END_FOR
END_IF

//Deleting acknoledged errors
FOR nListCnt1 := 0 TO cSizeOfErrorData - 1 DO
	IF ErrorSystem.aErrorData[nListCnt1].ErrorState = DUT_ErrorState.Acknowledged THEN
		MEMMOVE (ADR(ErrorSystem.aErrorData[nListCnt1]), ADR(ErrorSystem.aErrorData[nListCnt1+1]), (cSizeOfErrorData - 1 - nListCnt1) * SIZEOF(ST_ErrorEntry));
		MEMSET(ADR(ErrorSystem.aErrorData[cSizeOfErrorData - 1]), 0, SIZEOF(ST_ErrorEntry));
	END_IF
END_FOR
]]></ST>
    </Implementation>
    <LineIds Name="FB_ErrorSystem">
      <LineId Id="94" Count="1" />
      <LineId Id="147" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="150" Count="1" />
      <LineId Id="149" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="30" Count="6" />
      <LineId Id="291" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="180" Count="2" />
      <LineId Id="185" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="186" Count="1" />
      <LineId Id="189" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="202" Count="1" />
      <LineId Id="201" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="37" Count="7" />
      <LineId Id="250" Count="1" />
      <LineId Id="45" Count="2" />
      <LineId Id="247" Count="1" />
      <LineId Id="252" Count="1" />
      <LineId Id="249" Count="0" />
      <LineId Id="48" Count="21" />
      <LineId Id="9" Count="0" />
      <LineId Id="72" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>